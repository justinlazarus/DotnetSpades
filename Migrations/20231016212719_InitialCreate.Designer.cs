// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using spades.Data;

#nullable disable

namespace spades.Migrations
{
    [DbContext(typeof(SpadesContext))]
    [Migration("20231016212719_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.12");

            modelBuilder.Entity("spades.Models.Bid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("HandId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrickCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HandId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("spades.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Suit")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("spades.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndStamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartStamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("spades.Models.Hand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndStamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartStamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Hands");
                });

            modelBuilder.Entity("spades.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nickname")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("spades.Models.Trick", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndStamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("HandId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartStamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HandId");

                    b.ToTable("Tricks");
                });

            modelBuilder.Entity("spades.Models.TrickElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PlayStamp")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrickId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TrickId");

                    b.ToTable("TrickElemenents");
                });

            modelBuilder.Entity("spades.Models.Bid", b =>
                {
                    b.HasOne("spades.Models.Hand", "Hand")
                        .WithMany("Bids")
                        .HasForeignKey("HandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("spades.Models.Player", "Player")
                        .WithMany("Bids")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hand");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("spades.Models.Hand", b =>
                {
                    b.HasOne("spades.Models.Game", "Game")
                        .WithMany("Hands")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("spades.Models.Trick", b =>
                {
                    b.HasOne("spades.Models.Hand", "Hand")
                        .WithMany("Tricks")
                        .HasForeignKey("HandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hand");
                });

            modelBuilder.Entity("spades.Models.TrickElement", b =>
                {
                    b.HasOne("spades.Models.Card", "Card")
                        .WithMany("TrickElements")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("spades.Models.Player", null)
                        .WithMany("TrickElements")
                        .HasForeignKey("PlayerId");

                    b.HasOne("spades.Models.Trick", "Trick")
                        .WithMany("TrickElements")
                        .HasForeignKey("TrickId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Trick");
                });

            modelBuilder.Entity("spades.Models.Card", b =>
                {
                    b.Navigation("TrickElements");
                });

            modelBuilder.Entity("spades.Models.Game", b =>
                {
                    b.Navigation("Hands");
                });

            modelBuilder.Entity("spades.Models.Hand", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Tricks");
                });

            modelBuilder.Entity("spades.Models.Player", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("TrickElements");
                });

            modelBuilder.Entity("spades.Models.Trick", b =>
                {
                    b.Navigation("TrickElements");
                });
#pragma warning restore 612, 618
        }
    }
}
